import React, { useState, useEffect } from 'react';
import Web3 from 'web3';
import axios from 'axios';
import CurrencyToEthConverter from './currencytoethconverter';
import '../UserAdPage/style.css';
import SimpleStorage from "../../../src/contracts/SimpleStorage.json"

const Transaction = () => {
  const [web3, setWeb3] = useState(null);
  const [account, setAccount] = useState('');
  const [userInput, setUserInput] = useState('');
  const [transactionHash, setTransactionHash] = useState('');
  const [campaigns, setCampaigns] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  var data
  var uniqueID
  var campaignName
  var objid
  var value
  useEffect(() => {
    const fetchCampaigns = async () => {
      try {
        const response = await axios.get('http://localhost:3001/api/uniquecampaignid');
        
        
        setCampaigns(response.data.data.allCampaignDetails);
     
        setLoading(false);
      } catch (error) {
        console.error('Error fetching campaigns:', error);
        setError(error);
        setLoading(false);
      }
    };

    const initWeb3 = async () => {
      if (window.ethereum) {
        try {
          await window.ethereum.request({ method: 'eth_requestAccounts' });
          const web3Instance = new Web3(window.ethereum);
          setWeb3(web3Instance);

          const accounts = await web3Instance.eth.getAccounts();
          setAccount(accounts[0]);

          window.ethereum.on('accountsChanged', (newAccounts) => {
            setAccount(newAccounts[0]);
          });
        } catch (error) {
          console.error('Error connecting to MetaMask:', error);
        }
      } else {
        console.error('MetaMask not found. Install or enable it.');
      }
    };

    fetchCampaigns();
    initWeb3();
  }, []);




  const checkStoredBlockData = async () => {
    try {
      const provider = new Web3.providers.HttpProvider("http://127.0.0.1:7545");
      const web3 = new Web3(provider);

      const contractAddress = '0xdaA99eb42dEa55E644fD90B4fa3490e65CDd2c41';
      const SimpleStorageContract = new web3.eth.Contract(SimpleStorage.abi, contractAddress);

      const storedData = await SimpleStorageContract.methods.getTransactionDetails().call({ from: (await web3.eth.getAccounts())[0] });

      console.log('User details stored in the blockchain:', storedData);
      // Replace setStoredDetails with the correct state setting functions
    } catch (error) {
      console.error('Error reading stored data:', error.message);
    }
  };



  const StoreBlockChain = async () => {


    try {
      

      // Connect to the blockchain
      const provider = new Web3.providers.HttpProvider("http://127.0.0.1:7545");
      const web3 = await new Web3(provider);

      const contractAddress = '0xdaA99eb42dEa55E644fD90B4fa3490e65CDd2c41';
      const SimpleStorageContract = new web3.eth.Contract(SimpleStorage.abi, contractAddress);

      const accounts = await web3.eth.getAccounts();

      const gasLimit = 3000000;
      const gasPrice = '5000000000';

      // Use campaignData to get values
      await SimpleStorageContract.methods
        .storeTransactionDetails(
          userInput ,uniqueID,campaignName)
        .send({ from: accounts[0], gas: gasLimit, gasPrice: gasPrice });

      console.log('User details stored on the blockchain successfully');
      await checkStoredBlockData()

      
    } catch (error) {
      console.error('Error submitting form:', error.message);
    }


  }

  const handleUserInput = (event) => {
    setUserInput(event.target.value);
     value = event.target.value;
    
    
  };
  const sendDataToServer = async() => {



    const response = await axios.get('http://localhost:3001/api/uniquecampaignid');
    data=response.data.data.allCampaignDetails
    uniqueID=(data[0].uniqueID)
    campaignName=data[0].campaignName
    objid=data[0]._id
    console.log(data)
    console.log(userInput,uniqueID,campaignName,objid)
  
    axios.post('http://localhost:3001/api/storecampaignbalance', {userInput ,uniqueID,campaignName,objid})
    .then(response => {
       console.log(response.data); // Handle the response as needed
    })
    .catch(error => {
      console.error('Error making POST request:', error);
    });
    await  StoreBlockChain()
  





  };

  const sendTransaction = async () => {
    if (!web3 || !account || !userInput || isNaN(userInput)) {
      alert('Please connect to MetaMask and enter a valid value');
      return;
    }

    try {
      const valueInWei = web3.utils.toWei(userInput.toString(), 'ether');
      const recipientAddress = '0x9fBFb24AAd33Ee8C8fE7Ac953eAc5b9B49214f5b'; // Replace with the actual recipient address

      const transactionObject = {
        to: recipientAddress,
        value: valueInWei,
        from: account,
        gas: 21000,
      };
      sendDataToServer();

      const hash = await web3.eth.sendTransaction(transactionObject);
      setTransactionHash(hash);
      
    } catch (error) {
      console.error('Transaction error:', error);
      alert('Transaction failed. Check the console for details.');
    }
  };

  return (
    <div className='dono'>
      {/* Section 1: Campaign Details */}
      <div className="header">
  
        <h2>Pegasus Charity</h2>
      </div>
      <div className="sectionCard">
  <h1>Campaign Details</h1>
  {Array.isArray(campaigns) && campaigns.length > 0 ? (
    <table>
      <thead>
        <tr>
          <th>Campaign Name</th>
          <th>NGO Name</th>
          {/* Add other table headers as needed */}
        </tr>
      </thead>
      <tbody>
        {campaigns.map((campaign) => (
          <tr key={campaign._id}>
            <td>{campaign.campaignName}</td>
            <td>{campaign.ngoName}</td>
            {/* Add other campaign details as needed */}
          </tr>
        ))}
      </tbody>
    </table>
  ) : (
    <p>No campaign details found.</p>
  )}
</div>
      {/* Section 2: USD to ETH Converter */}
      {/* Section 2: Currency to ETH Converter */}
      {/* Section 2: Currency to ETH Converter */}
        <div className="sectionCard">
          <div>
            <h1>Currency to ETH Converter</h1>
            <CurrencyToEthConverter conversionRates={{
              USD: 0.00044,
              EUR: 0.00048,
              INR: 0.0000053,
              // Add more currencies and rates as needed
            }} />
          </div>
        </div>



      {/* Section 3: MetaMask Transaction Example */}
      <div className="sectionCard">
        <h1>MetaMask Transaction</h1>
        <div style={{ marginTop: '15px' }}>
          {account ? (
            <p>Connected Account: {account}</p> 
          ) : (
            <p>Connect to MetaMask...</p>
          )}
        </div>
        <br></br>
        <input
          type="text"
          placeholder="Enter value in Ether"
          value={userInput}
          onChange={handleUserInput}
        />
        <div style={{ marginTop: '5px' }}></div>
        <button onClick={sendTransaction} style={{ backgroundColor: 'green', color: 'white' }}>Send Transaction</button>

        {transactionHash && (
          <p>
            Transaction Hash:{' '}
            <a
              href={`https://sepolia.etherscan.io//tx/${transactionHash.transactionHash}`}
              target="_blank"
              rel="noopener noreferrer"
            >
              {transactionHash.transactionHash}
            </a>
          </p>
        )}
      </div>

      {/* Section 4: Other Sections from UserAdPage (Add as needed) */}
      <div className="sectionCard" style={{ background: '#yourServiceSectionBackgroundColor' }}>
        <section id="services">
          <div>
            <h1>Our Services</h1>
            <p>
              At Pegasus Foundation, we offer a range of services to help you achieve your business goals. From online presence to targeted marketing, we've got you covered.
            </p>
          </div>
        </section>
      </div>

      <div className="sectionCard" style={{ background: '#yourAboutSectionBackgroundColor' }}>
        <section id="about">
          <div>
            <h1>About Pegasus Foundation</h1>
            <p>
              Pegasus Foundation is more than just a marketing agency. We are a team of dedicated professionals committed to making a positive impact on the world.
            </p>
            {/* More about us... */}
          </div>
        </section>
      </div>

      <div className="sectionCard">
        <section id="contact">
        <div className='dono' element id='contact'>
            <h1 style={{color:'white'}}>Contact Us</h1>
            <p style={{color:'white'}}>
              Have questions or want to collaborate? Reach out to us, and let's discuss how we can work together to achieve great things.
            </p>
            {/* Contact form or details... */}
            <p style={{color:'white'}}>Follow us on social media:</p>
            <p>
            <a href="https://www.youtube.com/watch?v=nlYlNF30bVg" target="_blank">
            <img
              src="https://cdn3.iconfinder.com/data/icons/picons-social/57/46-facebook-512.png"
              alt="Facebook"
              style={{ width: '50px', height: '50px' }} // Adjust the width and height as needed
            />
          </a>
          </p>
          </div>
        </section>
      </div>

      <div className="sectionCard">
        <footer>
          <p>&copy; 2023 Pegasus Foundation. All rights reserved.</p>
        </footer>
      </div>
    </div>
  );
};

export default Transaction;